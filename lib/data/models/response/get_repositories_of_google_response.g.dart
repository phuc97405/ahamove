// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'get_repositories_of_google_response.dart';

// **************************************************************************
// JsonSerializableGenerator
// **************************************************************************

GetRepositoriesOfGoogleResponse _$GetRepositoriesOfGoogleResponseFromJson(
        Map<String, dynamic> json) =>
    GetRepositoriesOfGoogleResponse(
      id: (json['id'] as num).toInt(),
      nodeId: json['nodeId'] as String?,
      name: json['name'] as String?,
      fullName: json['fullName'] as String?,
      private: json['private'] as bool?,
      owner: json['owner'] == null
          ? null
          : Owner.fromJson(json['owner'] as Map<String, dynamic>),
      htmlUrl: json['htmlUrl'] as String?,
      description: json['description'] as String?,
      fork: json['fork'] as bool?,
      url: json['url'] as String?,
      forksUrl: json['forksUrl'] as String?,
      keysUrl: json['keysUrl'] as String?,
      collaboratorsUrl: json['collaboratorsUrl'] as String?,
      teamsUrl: json['teamsUrl'] as String?,
      hooksUrl: json['hooksUrl'] as String?,
      issueEventsUrl: json['issueEventsUrl'] as String?,
      eventsUrl: json['eventsUrl'] as String?,
      assigneesUrl: json['assigneesUrl'] as String?,
      branchesUrl: json['branchesUrl'] as String?,
      tagsUrl: json['tagsUrl'] as String?,
      blobsUrl: json['blobsUrl'] as String?,
      gitTagsUrl: json['gitTagsUrl'] as String?,
      gitRefsUrl: json['gitRefsUrl'] as String?,
      treesUrl: json['treesUrl'] as String?,
      statusesUrl: json['statusesUrl'] as String?,
      languagesUrl: json['languagesUrl'] as String?,
      stargazersUrl: json['stargazersUrl'] as String?,
      contributorsUrl: json['contributorsUrl'] as String?,
      subscribersUrl: json['subscribersUrl'] as String?,
      subscriptionUrl: json['subscriptionUrl'] as String?,
      commitsUrl: json['commitsUrl'] as String?,
      gitCommitsUrl: json['gitCommitsUrl'] as String?,
      commentsUrl: json['commentsUrl'] as String?,
      issueCommentUrl: json['issueCommentUrl'] as String?,
      contentsUrl: json['contentsUrl'] as String?,
      compareUrl: json['compareUrl'] as String?,
      mergesUrl: json['mergesUrl'] as String?,
      archiveUrl: json['archiveUrl'] as String?,
      downloadsUrl: json['downloadsUrl'] as String?,
      issuesUrl: json['issuesUrl'] as String?,
      pullsUrl: json['pullsUrl'] as String?,
      milestonesUrl: json['milestonesUrl'] as String?,
      notificationsUrl: json['notificationsUrl'] as String?,
      labelsUrl: json['labelsUrl'] as String?,
      releasesUrl: json['releasesUrl'] as String?,
      deploymentsUrl: json['deploymentsUrl'] as String?,
      createdAt: json['createdAt'] as String?,
      updatedAt: json['updatedAt'] as String?,
      pushedAt: json['pushedAt'] as String?,
      gitUrl: json['gitUrl'] as String?,
      sshUrl: json['sshUrl'] as String?,
      cloneUrl: json['cloneUrl'] as String?,
      svnUrl: json['svnUrl'] as String?,
      homepage: json['homepage'] as String?,
      size: (json['size'] as num?)?.toInt(),
      stargazers_count: (json['stargazers_count'] as num?)?.toInt(),
      watchers_count: (json['watchers_count'] as num?)?.toInt(),
      language: json['language'] as String?,
      has_issues: json['has_issues'] as bool?,
      has_Pages: json['has_Pages'] as bool?,
      has_downloads: json['has_downloads'] as bool?,
      has_wiki: json['has_wiki'] as bool?,
      has_projects: json['has_projects'] as bool?,
      has_discussions: json['has_discussions'] as bool?,
      forks_count: (json['forks_count'] as num?)?.toInt(),
      mirror_url: json['mirror_url'],
      archived: json['archived'] as bool?,
      disabled: json['disabled'] as bool?,
      open_issues: (json['open_issues'] as num?)?.toInt(),
      license: json['license'] == null
          ? null
          : License.fromJson(json['license'] as Map<String, dynamic>),
      allow_forking: json['allow_forking'] as bool?,
      is_template: json['is_template'] as bool?,
      web_commit_signoff_required: json['web_commit_signoff_required'] as bool?,
      topics:
          (json['topics'] as List<dynamic>?)?.map((e) => e as String).toList(),
      visibility: json['visibility'] as String?,
      forks: (json['forks'] as num?)?.toInt(),
      open_issues_count: (json['open_issues_count'] as num?)?.toInt(),
      watchers: (json['watchers'] as num?)?.toInt(),
      default_branch: json['default_branch'] as String?,
      permissions: json['permissions'] == null
          ? null
          : Permissions.fromJson(json['permissions'] as Map<String, dynamic>),
    );

Map<String, dynamic> _$GetRepositoriesOfGoogleResponseToJson(
        GetRepositoriesOfGoogleResponse instance) =>
    <String, dynamic>{
      'id': instance.id,
      'nodeId': instance.nodeId,
      'name': instance.name,
      'fullName': instance.fullName,
      'private': instance.private,
      'owner': instance.owner,
      'htmlUrl': instance.htmlUrl,
      'description': instance.description,
      'fork': instance.fork,
      'url': instance.url,
      'forksUrl': instance.forksUrl,
      'keysUrl': instance.keysUrl,
      'collaboratorsUrl': instance.collaboratorsUrl,
      'teamsUrl': instance.teamsUrl,
      'hooksUrl': instance.hooksUrl,
      'issueEventsUrl': instance.issueEventsUrl,
      'eventsUrl': instance.eventsUrl,
      'assigneesUrl': instance.assigneesUrl,
      'branchesUrl': instance.branchesUrl,
      'tagsUrl': instance.tagsUrl,
      'blobsUrl': instance.blobsUrl,
      'gitTagsUrl': instance.gitTagsUrl,
      'gitRefsUrl': instance.gitRefsUrl,
      'treesUrl': instance.treesUrl,
      'statusesUrl': instance.statusesUrl,
      'languagesUrl': instance.languagesUrl,
      'stargazersUrl': instance.stargazersUrl,
      'contributorsUrl': instance.contributorsUrl,
      'subscribersUrl': instance.subscribersUrl,
      'subscriptionUrl': instance.subscriptionUrl,
      'commitsUrl': instance.commitsUrl,
      'gitCommitsUrl': instance.gitCommitsUrl,
      'commentsUrl': instance.commentsUrl,
      'issueCommentUrl': instance.issueCommentUrl,
      'contentsUrl': instance.contentsUrl,
      'compareUrl': instance.compareUrl,
      'mergesUrl': instance.mergesUrl,
      'archiveUrl': instance.archiveUrl,
      'downloadsUrl': instance.downloadsUrl,
      'issuesUrl': instance.issuesUrl,
      'pullsUrl': instance.pullsUrl,
      'milestonesUrl': instance.milestonesUrl,
      'notificationsUrl': instance.notificationsUrl,
      'labelsUrl': instance.labelsUrl,
      'releasesUrl': instance.releasesUrl,
      'deploymentsUrl': instance.deploymentsUrl,
      'createdAt': instance.createdAt,
      'updatedAt': instance.updatedAt,
      'pushedAt': instance.pushedAt,
      'gitUrl': instance.gitUrl,
      'sshUrl': instance.sshUrl,
      'cloneUrl': instance.cloneUrl,
      'svnUrl': instance.svnUrl,
      'homepage': instance.homepage,
      'size': instance.size,
      'stargazers_count': instance.stargazers_count,
      'watchers_count': instance.watchers_count,
      'language': instance.language,
      'has_issues': instance.has_issues,
      'has_projects': instance.has_projects,
      'has_downloads': instance.has_downloads,
      'has_wiki': instance.has_wiki,
      'has_Pages': instance.has_Pages,
      'has_discussions': instance.has_discussions,
      'forks_count': instance.forks_count,
      'mirror_url': instance.mirror_url,
      'archived': instance.archived,
      'disabled': instance.disabled,
      'open_issues_count': instance.open_issues_count,
      'license': instance.license,
      'allow_forking': instance.allow_forking,
      'is_template': instance.is_template,
      'web_commit_signoff_required': instance.web_commit_signoff_required,
      'topics': instance.topics,
      'visibility': instance.visibility,
      'forks': instance.forks,
      'open_issues': instance.open_issues,
      'watchers': instance.watchers,
      'default_branch': instance.default_branch,
      'permissions': instance.permissions,
    };

License _$LicenseFromJson(Map<String, dynamic> json) => License(
      key: json['key'] as String?,
      name: json['name'] as String?,
      spdxId: json['spdxId'] as String?,
      url: json['url'] as String?,
      nodeId: json['nodeId'] as String?,
    );

Map<String, dynamic> _$LicenseToJson(License instance) => <String, dynamic>{
      'key': instance.key,
      'name': instance.name,
      'spdxId': instance.spdxId,
      'url': instance.url,
      'nodeId': instance.nodeId,
    };

Owner _$OwnerFromJson(Map<String, dynamic> json) => Owner(
      login: json['login'] as String?,
      id: (json['id'] as num?)?.toInt(),
      nodeId: json['nodeId'] as String?,
      avatarUrl: json['avatarUrl'] as String?,
      gravatarId: json['gravatarId'] as String?,
      url: json['url'] as String?,
      htmlUrl: json['htmlUrl'] as String?,
      followersUrl: json['followersUrl'] as String?,
      followingUrl: json['followingUrl'] as String?,
      gistsUrl: json['gistsUrl'] as String?,
      starredUrl: json['starredUrl'] as String?,
      subscriptionsUrl: json['subscriptionsUrl'] as String?,
      organizationsUrl: json['organizationsUrl'] as String?,
      reposUrl: json['reposUrl'] as String?,
      eventsUrl: json['eventsUrl'] as String?,
      receivedEventsUrl: json['receivedEventsUrl'] as String?,
      type: json['type'] as String?,
      siteAdmin: json['siteAdmin'] as bool?,
    );

Map<String, dynamic> _$OwnerToJson(Owner instance) => <String, dynamic>{
      'login': instance.login,
      'id': instance.id,
      'nodeId': instance.nodeId,
      'avatarUrl': instance.avatarUrl,
      'gravatarId': instance.gravatarId,
      'url': instance.url,
      'htmlUrl': instance.htmlUrl,
      'followersUrl': instance.followersUrl,
      'followingUrl': instance.followingUrl,
      'gistsUrl': instance.gistsUrl,
      'starredUrl': instance.starredUrl,
      'subscriptionsUrl': instance.subscriptionsUrl,
      'organizationsUrl': instance.organizationsUrl,
      'reposUrl': instance.reposUrl,
      'eventsUrl': instance.eventsUrl,
      'receivedEventsUrl': instance.receivedEventsUrl,
      'type': instance.type,
      'siteAdmin': instance.siteAdmin,
    };

Permissions _$PermissionsFromJson(Map<String, dynamic> json) => Permissions(
      admin: json['admin'] as bool?,
      maintain: json['maintain'] as bool?,
      push: json['push'] as bool?,
      triage: json['triage'] as bool?,
      pull: json['pull'] as bool?,
    );

Map<String, dynamic> _$PermissionsToJson(Permissions instance) =>
    <String, dynamic>{
      'admin': instance.admin,
      'maintain': instance.maintain,
      'push': instance.push,
      'triage': instance.triage,
      'pull': instance.pull,
    };
